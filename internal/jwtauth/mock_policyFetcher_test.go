// Code generated by mockery v2.33.3. DO NOT EDIT.

package jwtauth

import (
	context "context"

	schema "github.com/hashicorp/vault-client-go/schema"
	mock "github.com/stretchr/testify/mock"
)

// mockPolicyFetcher is an autogenerated mock type for the policyFetcher type
type mockPolicyFetcher struct {
	mock.Mock
}

type mockPolicyFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPolicyFetcher) EXPECT() *mockPolicyFetcher_Expecter {
	return &mockPolicyFetcher_Expecter{mock: &_m.Mock}
}

// policies provides a mock function with given fields: ctx, request
func (_m *mockPolicyFetcher) policies(ctx context.Context, request schema.JwtLoginRequest) ([]string, error) {
	ret := _m.Called(ctx, request)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.JwtLoginRequest) ([]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.JwtLoginRequest) []string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.JwtLoginRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockPolicyFetcher_policies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'policies'
type mockPolicyFetcher_policies_Call struct {
	*mock.Call
}

// policies is a helper method to define mock.On call
//   - ctx context.Context
//   - request schema.JwtLoginRequest
func (_e *mockPolicyFetcher_Expecter) policies(ctx interface{}, request interface{}) *mockPolicyFetcher_policies_Call {
	return &mockPolicyFetcher_policies_Call{Call: _e.mock.On("policies", ctx, request)}
}

func (_c *mockPolicyFetcher_policies_Call) Run(run func(ctx context.Context, request schema.JwtLoginRequest)) *mockPolicyFetcher_policies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(schema.JwtLoginRequest))
	})
	return _c
}

func (_c *mockPolicyFetcher_policies_Call) Return(_a0 []string, _a1 error) *mockPolicyFetcher_policies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockPolicyFetcher_policies_Call) RunAndReturn(run func(context.Context, schema.JwtLoginRequest) ([]string, error)) *mockPolicyFetcher_policies_Call {
	_c.Call.Return(run)
	return _c
}

// newMockPolicyFetcher creates a new instance of mockPolicyFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPolicyFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPolicyFetcher {
	mock := &mockPolicyFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
